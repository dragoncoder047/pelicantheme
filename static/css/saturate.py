import colorsys
import re

hexcolor = re.compile(r'#([0-9a-f]{6})', re.MULTILINE | re.IGNORECASE)

def from_match(match):
    c = match[1]
    r = int(c[0:2], base=16)
    g = int(c[2:4], base=16)
    b = int(c[4:6], base=16)
    return r, g, b

def css_from_01rgb(r, g, b):
    rc = hex(int(r*255))[2:].zfill(2)
    gc = hex(int(g*255))[2:].zfill(2)
    bc = hex(int(b*255))[2:].zfill(2)
    return f'#{rc}{gc}{bc}'

def saturate_lightness(match):
    r, g, b = from_match(match)

    h, s, v = colorsys.rgb_to_hsv(r/255.0, g/255.0, b/255.0)
    if s < 0.1:
        return match[0]
    color = colorsys.hsv_to_rgb(h, 1, v)
    return f"/* {match[0]} */ {css_from_01rgb(*color)}"

def make_media(match):
    r, g, b = from_match(match)
    if r == g == b:
        r = 255 - r
        g = 255 - g
        b = 255 - b
        return css_from_01rgb(r/255, g/255, b/255)
    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)
    if v > 0.7:
        v = 1.3 - v
    color = colorsys.hsv_to_rgb(h, 1, v)
    return css_from_01rgb(*color)

def comment_out(text):
    return '\n'.join([f'/*---- {line.strip().replace("*/", "")} ----*/' for line in text.split('\n') if line.strip()])

def process(infile, outfile):
    out = ''
    with open(infile) as file:
        text = file.read()
        saturated = hexcolor.sub(saturate_lightness, text)
        media = hexcolor.sub(make_media, '\n'.join(text.split('\n')[1:]))
        out = f'''/* auto-generated by saturate.py from {infile} */
    {saturated}
    '''

    with open(outfile, 'w') as f:
        f.write(out)

process('pygments_orig.css', 'pygments.css')
process('prism_orig.css', 'prism.css')
print('done')
